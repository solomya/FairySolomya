let currentLang = 'en';
let currentPage = 'home';  // save the current page

function loadPage(page) {
    currentPage = page;

    // Update hash when navigating
    if (location.hash !== `#/${currentLang}/${page}`) {
        history.replaceState(null, '', `#/${currentLang}/${page}`);
    }

    // –£–¥–∞–ª–∏—Ç—å .active —É –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ –±–æ–∫–æ–≤–æ–≥–æ –∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–µ–Ω—é
    document.querySelectorAll('.sidebar a, .nav-links a').forEach(link => {
        link.classList.remove('active');
    });

    // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —Å–∞–π–¥–±–∞—Ä–µ
    const sidebarLink = document.querySelector(`.sidebar a[onclick="loadPage('${page}')"]`);
    if (sidebarLink) sidebarLink.classList.add('active');

    // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–º –º–µ–Ω—é
    const navLink = document.querySelector(`.nav-links a[onclick="loadPage('${page}')"]`);
    if (navLink) navLink.classList.add('active');

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å HTML-–∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    fetch(`pages/${page}.html`)
        .then(res => {
            if (!res.ok) throw new Error('Page not found');
            return res.text();
        })
        .then(html => {
            document.getElementById('content').innerHTML = html;
            loadTranslations();

            // –°–±—Ä–æ—Å —Å–∫—Ä–æ–ª–ª–∞ –≤–≤–µ—Ä—Ö
            window.scrollTo({ top: 0, behavior: "auto" });

            // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É
            if (page === 'contacts') {
                setupContactForm();
            }

            // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ home —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–∫–∞–∑–æ–∫
            if (page === 'home') {
                renderLatestTales(currentLang);
            }

            // –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ HTML ‚Äî –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å
            if (page === 'reviews') {
                loadReviewPage();
            }
        })

        // –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É 404, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
        .catch(() => {
            fetch(`pages/404.html`)
                .then(res => res.text())
                .then(html => {
                    document.getElementById('content').innerHTML = html;

                    loadTranslations(); // –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 404
                });

            document.getElementById('backHomeBtn')?.setAttribute('href', `#/${currentLang}/home`);
        });
};

// –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–∏
function setLang(lang) {
    currentLang = lang;
    localStorage.setItem('lang', lang);

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    document.querySelectorAll('.lang-btn').forEach(btn => {
        const btnLang = btn.textContent.trim().toLowerCase();
        btn.classList.toggle('active', btnLang === lang);
    });

    // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ select (mobile)
    const langSelect = document.getElementById("language-select");
    if (langSelect) {
        langSelect.value = lang;
    }

    loadTranslations();    // –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    loadPage(currentPage); // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º

    // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    document.querySelectorAll('.nav-links a, .sidebar a, #mobileMenuList a').forEach(link => {
        const key = link.getAttribute('data-key');
        if (!key) return;
        link.href = `#/${lang}/${key}`;
    });

}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ —è–∑—ã–∫–æ–≤—ã—Ö json
function loadTranslations() {
    fetch(`lang/${currentLang}.json`)
        .then(res => res.json())
        .then(translations => {
            document.querySelectorAll('[data-key]').forEach(el => {
                const key = el.getAttribute('data-key');
                if (!translations[key]) return;

                const translated = translations[key];

                // –ï—Å–ª–∏ —ç—Ç–æ <a>, –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã (—Å–æ—Ö—Ä–∞–Ω—è—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
                if (el.tagName.toLowerCase() === 'a') {
                    el.childNodes.forEach(node => {
                        if (node.nodeType === Node.TEXT_NODE) {
                            node.nodeValue = translated;
                        }
                    });
                } else {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    if (el.children.length > 0) {
                        for (let node of el.childNodes) {
                            if (node.nodeType === Node.TEXT_NODE) {
                                node.nodeValue = translated;
                                break;
                            }
                        }
                    } else {
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                        if (translated.includes('\n\n')) {
                            // –°—Ç–∏—Ö —Å –∞–±–∑–∞—Ü–∞–º–∏ (—Å—Ç—Ä–æ—Ñ–∞–º–∏)
                            const paragraphs = translated
                                .split('\n\n') // –¥–µ–ª–∏–º –Ω–∞ —Å—Ç—Ä–æ—Ñ—ã
                                .map(stanza => {
                                    const lines = stanza
                                        .trim()
                                        .split('\n')         // —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ—Ñ–µ
                                        .map(line => line.trim())
                                        .join('<br>');        // —Å—Ç—Ä–æ–∫–∏ ‚Üí —á–µ—Ä–µ–∑ <br>
                                    return `<p>${lines}</p>`; // —Å—Ç—Ä–æ—Ñ–∞ ‚Üí –≤ <p>
                                })
                                .join('');
                            el.innerHTML = paragraphs;

                        } else if (translated.includes('\n')) {
                            // –ü—Ä–æ—Å—Ç–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∞–±–∑–∞—Ü–µ–≤
                            const lines = translated
                                .split('\n')
                                .map(line => `<p>${line.trim()}</p>`)
                                .join('');
                            el.innerHTML = lines;

                        } else {
                            el.textContent = translated;
                        }
                    }

                }
            });
        });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EmailJS –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function setupContactForm() {
    const form = document.getElementById("contact-form");
    const status = document.getElementById("form-status");

    const captchaQuestion = document.getElementById("captcha-question");
    const captchaInput = document.getElementById("check-answer");

    if (!form || !status || !captchaQuestion || !captchaInput) return;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EmailJS –æ–¥–∏–Ω —Ä–∞–∑
    if (!emailjs.initDone) {
        emailjs.init("MQPPS__q8OajYNmHR");
        emailjs.initDone = true;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    let correctAnswer = 0;
    function generateCaptcha() {
        const a = Math.floor(Math.random() * 9) + 1;
        const b = Math.floor(Math.random() * 9) + 1;
        correctAnswer = a + b;
        captchaQuestion.textContent = `${a} + ${b} = `;
    }

    generateCaptcha();

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –≤–µ—à–∞–µ–º –Ω–æ–≤—ã–π
    form.removeEventListener("submit", handleFormSubmit);
    form.addEventListener("submit", handleFormSubmit);

    function handleFormSubmit(e) {
        e.preventDefault();

        const userAnswer = parseInt(captchaInput.value.trim());
        if (userAnswer !== correctAnswer) {
            status.textContent = "‚ö†Ô∏è Incorrect answer. Try again.";
            generateCaptcha(); // –æ–±–Ω–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
            return;
        }

        status.textContent = "‚è≥ Sending...";

        emailjs.sendForm("service_61vjb65", "template_8r27wsj", form)
            .then(() => {
                status.textContent = "‚úÖ Message sent!";
                form.reset();
                generateCaptcha(); // –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            })
            .catch((error) => {
                console.error("EmailJS Error:", error);
                status.textContent = "‚ùå Sending error. Try again later.";
            });
    }
}

// === –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–∫–∞–∑–æ–∫ –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã home.html. –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–∫–∞–∑–æ–∫ –±–µ—Ä—ë–º –∏–∑ fairy-tales.json === //
async function loadFairyTalesData() {
    try {
        const response = await fetch('data/fairy-tales.json');
        const tales = await response.json();
        return tales;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∞–∑–æ–∫:", error);
        return [];
    }
}

function isNewTale(tale) {
    const created = new Date(tale.date);
    const now = new Date();
    const diffDays = (now - created) / (1000 * 60 * 60 * 24);
    return diffDays <= 20;
}

function createFairyCard(tale, lang) {
    const card = document.createElement('div');
    card.className = 'fairy-card';

    const translation = tale.translations[lang] || tale.translations['ru'];
    const { title, intro } = translation;

    const buttonText = {
        ru: "–ß–∏—Ç–∞—Ç—å",
        en: "Read",
        ua: "–ß–∏—Ç–∞—Ç–∏",
        it: "Leggere"
    }[lang] || "Read";

    const newBadgeText = {
        ru: "üî• –ù–æ–≤–∏–Ω–∫–∞!",
        en: "üî• New!",
        ua: "üî• –ù–æ–≤–∏–Ω–∫–∞!",
        it: "üî• Novit√†!"
    }[lang] || "üî• New!";

    const isNew = isNewTale(tale);

    // üëâ –†–∞–∑–±–∏–≤–∞–µ–º intro –Ω–∞ –∞–±–∑–∞—Ü—ã
    const introHtml = intro
        .split("\n")
        .map(line => `<p>${line.trim()}</p>`)
        .join("");

    card.innerHTML = `
      ${isNew ? `<div class="new-badge">${newBadgeText}</div>` : ''}      
      <img src="${tale.image}" alt="${title}">
      <h3>${title}</h3>
      <p>${intro}</p>
      <button onclick="loadPage('${tale.id}')">${buttonText}</button>
    `;

    return card;
}

async function renderLatestTales(lang, limit = 4) {
    const container = document.getElementById("latest-tales-container");
    if (!container) return;

    container.innerHTML = "";

    const tales = await loadFairyTalesData();
    const sortedTales = tales
        .sort((a, b) => new Date(b.date) - new Date(a.date))
        .slice(0, limit);

    sortedTales.forEach(tale => {
        const card = createFairyCard(tale, lang);
        container.appendChild(card);
    });
}
// === –ö–æ–Ω–µ—Ü —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–∫–∞–∑–æ–∫ === //

// === –ö–∞—Ä—É—Å–µ–ª—å –æ—Ç–∑—ã–≤–æ–≤ === //
let reviewsData = [];
let currentReviewIndex = 0;

function loadReviewPage() {
    fetch('data/reviews.json')
        .then(res => res.json())
        .then(data => {
            reviewsData = data;
            currentReviewIndex = 0;
            renderReview();

            const prevBtn = document.getElementById('prev-review');
            const nextBtn = document.getElementById('next-review');

            if (prevBtn && nextBtn) {
                prevBtn.addEventListener('click', showPreviousReview);
                nextBtn.addEventListener('click', showNextReview);
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
        });
}

function renderReview() {
    if (!reviewsData.length) return;

    const review = reviewsData[currentReviewIndex];
    const container = document.getElementById('review-container');
    if (!container) return;

    container.innerHTML = '';

    const card = document.createElement('div');
    card.classList.add('review-card', 'collapsed');

    const name = document.createElement('h3');
    name.textContent = review.name[currentLang];

    const position = document.createElement('p');
    position.classList.add('review-position');
    position.textContent = review.position[currentLang];

    // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ + –∫–Ω–æ–ø–æ–∫
    const textWrapper = document.createElement('div');
    textWrapper.classList.add('review-text-wrapper');

    const text = document.createElement('p');
    text.classList.add('review-text');
    text.textContent = review.text[currentLang];

    // –ö–Ω–æ–ø–∫–∞ "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
    const expandBtn = document.createElement('button');
    expandBtn.classList.add('toggle-text-btn', 'expand-btn');
    expandBtn.setAttribute('data-key', 'expandReview');
    expandBtn.setAttribute('aria-expanded', 'false');

    // –ö–Ω–æ–ø–∫–∞ "—Å–≤–µ—Ä–Ω—É—Ç—å"
    const collapseBtn = document.createElement('button');
    collapseBtn.classList.add('toggle-text-btn', 'collapse-btn');
    collapseBtn.setAttribute('data-key', 'collapseReview');
    collapseBtn.setAttribute('aria-expanded', 'true');
    collapseBtn.style.display = 'none';

    textWrapper.appendChild(text);
    textWrapper.appendChild(expandBtn);
    textWrapper.appendChild(collapseBtn);

    // –ò—Å—Ç–æ—Ä–∏—è
    const story = document.createElement('p');
    story.classList.add('review-story');

    const storyLink = document.createElement('a');
    storyLink.href = '#';
    storyLink.textContent = review.story[currentLang];
    storyLink.style.cursor = 'pointer';
    storyLink.addEventListener('click', (e) => {
        e.preventDefault();
        loadPage(review.storyId); // –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫–∞–∑–∫—É –≤ <main>
    });
    story.appendChild(storyLink);

    // –ó–≤–µ–∑–¥—ã
    const stars = document.createElement('div');
    stars.classList.add('stars');
    stars.innerHTML = '‚òÖ'.repeat(review.stars) + '‚òÜ'.repeat(5 - review.stars);

    // –°–±–æ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    card.appendChild(name);
    card.appendChild(position);
    card.appendChild(textWrapper);
    card.appendChild(story);
    card.appendChild(stars);

    container.appendChild(card);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    expandBtn.addEventListener('click', () => {
        card.classList.remove('collapsed');
        card.classList.add('expanded');
        text.classList.add('expanded'); // üëâ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
        expandBtn.style.display = 'none';
        collapseBtn.style.display = 'inline-block';
        expandBtn.setAttribute('aria-expanded', 'true');
        collapseBtn.setAttribute('aria-expanded', 'true');
        loadTranslations();
    });

    collapseBtn.addEventListener('click', () => {
        card.classList.remove('expanded');
        card.classList.add('collapsed');
        text.classList.remove('expanded'); // üëâ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
        expandBtn.style.display = 'inline-block';
        collapseBtn.style.display = 'none';
        expandBtn.setAttribute('aria-expanded', 'false');
        collapseBtn.setAttribute('aria-expanded', 'false');
        loadTranslations();
    });

    loadTranslations();
}

function showPreviousReview() {
    currentReviewIndex = (currentReviewIndex - 1 + reviewsData.length) % reviewsData.length;
    renderReview();
}

function showNextReview() {
    currentReviewIndex = (currentReviewIndex + 1) % reviewsData.length;
    renderReview();
}
// === –ö–û–ù–ï–¶ –∫–∞—Ä—É—Å–µ–ª–∏ –æ—Ç–∑—ã–≤–æ–≤ === //


// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–∑ localStorage –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∑–∞–≥—Ä—É–∑–∏—Ç—å index
document.addEventListener('DOMContentLoaded', () => {
    const route = parseHashRoute();
    const savedLang = localStorage.getItem('lang');

    if (route) {
        currentLang = route.lang;
        currentPage = route.page;
    } else {
        currentLang = savedLang || 'en';
        currentPage = 'home';
    }

    setLang(currentLang);  // –ø—Ä–∏–º–µ–Ω–∏—Ç —è–∑—ã–∫ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É
    loadPage(currentPage); // –∑–∞–≥—Ä—É–∑–∏—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
});

window.addEventListener('hashchange', () => {
    const route = parseHashRoute();
    if (route) {
        if (route.lang !== currentLang) setLang(route.lang);
        loadPage(route.page);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞ cookie —á–µ—Ä–µ–∑ localStorage (–Ω–µ –º–æ–∂–µ—Ç –æ—Ç—Å—á–∏—Ç–∞—Ç—å –¥–Ω–∏)
// –£–±–∏—Ä–∞–µ–º, —Ç.–∫. –¥–µ–ª–∞–µ–º —á–µ—Ä–µ–∑ cookie
// document.addEventListener("DOMContentLoaded", () => {
//     const banner = document.getElementById("cookie-banner");
//     const acceptBtn = document.querySelector(".cookie-accept");
//     const declineBtn = document.querySelector(".cookie-decline");

//     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª–æ –≤—ã–±–æ—Ä–∞
//     if (!localStorage.getItem("cookieConsent")) {
//         banner.style.display = "flex";
//     }

//     acceptBtn.addEventListener("click", () => {
//         localStorage.setItem("cookieConsent", "accepted");
//         banner.style.display = "none";
//     });

//     declineBtn.addEventListener("click", () => {
//         localStorage.setItem("cookieConsent", "declined");
//         banner.style.display = "none";
//     });
// });


// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é –∏–∑ sidebar
document.addEventListener("DOMContentLoaded", () => {
    const sidebar = document.getElementById("sidebar");
    const mobileMenuList = document.getElementById("mobileMenuList");
    const sidebarCollections = sidebar.querySelectorAll("li.collection-title");

    function generateMobileMenu() {
        mobileMenuList.innerHTML = ""; // –æ—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π

        const sidebarCollections = sidebar.querySelectorAll("li.collection-title");

        sidebarCollections.forEach((collection) => {
            const dataKey = collection.getAttribute("data-key");
            const stories = collection.querySelectorAll("li.story-title");

            // –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
            const collectionItem = document.createElement("li");
            collectionItem.classList.add("mobile-collection-title");
            if (dataKey) {
                collectionItem.setAttribute("data-key", dataKey);
            }
            collectionItem.textContent = "title"; // –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–µ–≤–µ–¥—ë—Ç—Å—è —á–µ—Ä–µ–∑ loadTranslations)

            // –°–æ–∑–¥–∞—ë–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π
            const storyList = document.createElement("ul");
            storyList.classList.add("mobile-story-list");

            stories.forEach((story) => {
                const storyLink = story.querySelector("a");
                const storyItem = document.createElement("li");
                storyItem.classList.add("mobile-story-title");

                // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
                const clonedLink = storyLink.cloneNode(true);

                // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –º–æ–±–∏–ª—å–Ω–æ–º –º–µ–Ω—é
                const key = storyLink.getAttribute('data-key');
                clonedLink.href = `#/${currentLang}/${key}`;

                storyItem.appendChild(clonedLink);
                storyList.appendChild(storyItem);
            });

            collectionItem.appendChild(storyList);
            mobileMenuList.appendChild(collectionItem);
        });

        loadTranslations(); // —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤–æ–¥–∏–º
    }

    generateMobileMenu();

    // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –≤ .nav-links
    document.querySelectorAll('.nav-links a').forEach(link => {
        const key = link.getAttribute('data-key');
        if (!key) return;
        link.href = `#/${currentLang}/${key}`;
    });

    // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –≤ .sidebar
    document.querySelectorAll('.sidebar a').forEach(link => {
        const key = link.getAttribute('data-key');
        if (!key) return;
        link.href = `#/${currentLang}/${key}`;
    });

}); function parseHashRoute() {
    const hash = window.location.hash;
    const match = hash.match(/^#\/([a-z]{2})\/([a-zA-Z0-9_-]+)$/);
    if (match) {
        return { lang: match[1], page: match[2] };
    }
    return null;
};

// –ø–∞—Ä—Å–∏–Ω–≥ —Ö—ç—à–∞
function parseHashRoute() {
    const hash = window.location.hash;
    const match = hash.match(/^#\/([a-z]{2})\/([a-zA-Z0-9_-]+)$/);
    if (match) {
        return { lang: match[1], page: match[2] };
    }
    return null;
}


document.addEventListener("DOMContentLoaded", function () {
    const burger = document.getElementById("burger");
    const mobileMenu = document.getElementById("mobileMenu");
    const collectionToggles = document.querySelectorAll(".collection-toggle");

    // –ü–æ–∫–∞–∑ –º–µ–Ω—é
    burger.addEventListener("click", () => {
        mobileMenu.classList.remove("hidden");
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–µ–Ω—é
    document.addEventListener("click", function (event) {
        const isClickInside = mobileMenu.contains(event.target) || burger.contains(event.target);
        if (!isClickInside) {
            mobileMenu.classList.add("hidden");
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –ª—é–±—É—é —Å—Å—ã–ª–∫—É –≤ –º–µ–Ω—é
    mobileMenu.querySelectorAll("a").forEach(link => {
        link.addEventListener("click", () => {
            mobileMenu.classList.add("hidden");
        });
    });

    // –†–∞—Å–∫—Ä—ã—Ç–∏–µ/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–¥–º–µ–Ω—é
    collectionToggles.forEach(toggle => {
        toggle.addEventListener("click", (e) => {
            e.stopPropagation(); // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ toggle
            const submenu = toggle.nextElementSibling;
            submenu.classList.toggle("hidden");
        });
    });
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è "–ø—ã–ª—å—Ü—ã" –∑–∞ —Ñ–µ–µ–π
function createSparkleAtFairy(fairy) {
    const sparkle = document.createElement('div');
    sparkle.className = 'fairy-sparkle';

    const rect = fairy.getBoundingClientRect();
    const parentRect = fairy.offsetParent.getBoundingClientRect();

    sparkle.style.left = (rect.left - parentRect.left + fairy.offsetWidth / 2) + 'px';
    sparkle.style.top = (rect.top - parentRect.top + fairy.offsetHeight / 2) + 'px';

    fairy.offsetParent.appendChild(sparkle);

    setTimeout(() => sparkle.remove(), 1000); // —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ 1 —Å–µ–∫
}

// –ö–Ω–æ–ø–∫–∞ Back to Top - —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–µ—Ä—Ö.
// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –≤–Ω–∏–∑
window.onscroll = function () {
    const btn = document.getElementById("toTopBtn");
    if (document.body.scrollTop > 300 || document.documentElement.scrollTop > 300) {
        btn.style.display = "block";
    } else {
        btn.style.display = "none";
    }
};

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞–≤–µ—Ä—Ö –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
document.getElementById("toTopBtn").onclick = function () {
    window.scrollTo({
        top: 0,
        behavior: "smooth"
    });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookie

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cookie
function setCookie(name, value, days) {
    const d = new Date();
    d.setTime(d.getTime() + days * 24 * 60 * 60 * 1000);
    document.cookie = `${name}=${value}; expires=${d.toUTCString()}; path=/`;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ cookie
function getCookie(name) {
    const ca = decodeURIComponent(document.cookie).split(';');
    name = name + "=";
    for (let c of ca) {
        while (c.charAt(0) === ' ') c = c.substring(1);
        if (c.indexOf(name) === 0) return c.substring(name.length);
    }
    return "";
}

window.addEventListener("load", () => {
    const banner = document.getElementById("cookie-banner");
    const acceptBtn = document.getElementById("cookie-accept");
    const declineBtn = document.getElementById("cookie-decline");

    if (getCookie("cookieAccepted") !== "") {
        // –°–æ–≥–ª–∞—Å–∏–µ ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
        banner.style.display = "none";
        return;
    }

    if (getCookie("cookieDeclined") !== "") {
        // –û—Ç–∫–∞–∑ (–Ω–∞ 1 –¥–µ–Ω—å) ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
        banner.style.display = "none";
        return;
    }

    // –ï—Å–ª–∏ –∫—É–∫–æ–≤ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –∏ –Ω–∞–≤–µ—à–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    banner.style.display = "flex";

    acceptBtn.onclick = () => {
        setCookie("cookieAccepted", "true", 30); // 30 –¥–Ω–µ–π
        banner.style.display = "none";
    };

    declineBtn.onclick = () => {
        setCookie("cookieDeclined", "true", 1); // 1 –¥–µ–Ω—å
        banner.style.display = "none";
    };
});
// –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookie